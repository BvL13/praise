import { useRecoilValue } from 'recoil';
import { useParams } from 'react-router-dom';
import { PeriodPageParams, SinglePeriod } from '../../../model/periods/periods';
import { CreateAttestationsButton } from './CreateAttestationsButton';
import { CreateAttestationsDialog } from './CreateAttestationsDialog';
import { AttestationsDetailBox } from './AttestationsDetailBox';
import { useRef, useState } from 'react';
import { Dialog } from '@headlessui/react';
import { useNetwork } from 'wagmi';
import { ETH_CHAIN_ID } from '../../../model/eth/eth.constants';
import { SwitchNetworkButton } from './SwitchNetworkButton';
import { EasContextProvider } from '../../../model/eas/components/EasContextProvider';
import { ATTESTATION_SCHEMA_UID } from '../../../model/eas/eas.constants';
import { CurrentCommunity } from '../../../model/community/community';

const Attestations = (): JSX.Element | null => {
  // Hooks
  const { periodId } = useParams<PeriodPageParams>();
  const period = useRecoilValue(SinglePeriod(periodId));
  const dialogRef = useRef(null);
  const { chain } = useNetwork();

  // Local state
  const [dialogOpen, setDialogOpen] = useState(false);

  // Global state
  const community = useRecoilValue(CurrentCommunity);

  if (!period || !chain || !community?.features.attestations) {
    return null;
  }

  if (period.status !== 'CLOSED') {
    return (
      <div className="flex items-center justify-center w-full h-full">
        <div className="flex flex-col items-center justify-center gap-5">
          <img
            src="/eas-logo.png"
            alt="Ethereum Attestation Service"
            className="block w-16"
          />
          Attestations can be generated once praise has been quantified and the
          period has been closed.
        </div>
      </div>
    );
  }

  return (
    <EasContextProvider schemaUid={ATTESTATION_SCHEMA_UID}>
      <div className="flex flex-col gap-5 px-5">
        <div className="flex justify-between">
          <h2>Attestations</h2>
          <img
            src="/eas-logo.png"
            alt="Ethereum Attestation Service"
            className="object-contain w-16"
          />
        </div>
        <p>
          Attestations are signed statements about a person, entity, or thing,
          made by an individual, company, or organization and are one of the
          building blocks of decentralized identity. Praise attestations are
          generated by the Ethereum Attestation Service (EAS) on the{' '}
          <a href="https://www.optimism.io/" target="_blank" rel="noreferrer">
            Optimism
          </a>{' '}
          blockchain.
        </p>
        {!period?.attestationsTxHash && (
          <div>No attestations have yet been created for this period.</div>
        )}
        {chain?.id === ETH_CHAIN_ID && (
          <CreateAttestationsButton onClick={(): void => setDialogOpen(true)} />
        )}
        {period?.attestationsTxHash && chain?.id === ETH_CHAIN_ID && (
          <AttestationsDetailBox />
        )}
        {chain?.id !== ETH_CHAIN_ID && (
          <div className="flex flex-col items-start gap-5">
            Connect to Optimism to create or view attestations.
            <SwitchNetworkButton />
          </div>
        )}
      </div>
      <Dialog
        open={dialogOpen}
        onClose={(): void => setDialogOpen(false)}
        className="fixed inset-0 z-10 overflow-y-auto"
        initialFocus={dialogRef}
      >
        <div ref={dialogRef}>
          <CreateAttestationsDialog
            onClose={(): void => setDialogOpen(false)}
          />
        </div>
      </Dialog>
    </EasContextProvider>
  );
};

export default Attestations;
