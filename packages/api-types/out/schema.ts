/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/activate": {
    /** Activate a user account in order to be able to give praise and receive rewards. Activation a user account creates a new User object or adds user account to User if it already exists. */
    post: operations["ActivateController_activate"];
  };
  "/api/users/export": {
    /** Export users document to json or csv */
    get: operations["UsersController_export"];
  };
  "/api/users": {
    get: operations["UsersController_findAll"];
  };
  "/api/users/{id}": {
    get: operations["UsersController_findOne"];
    /** Updates a user */
    patch: operations["UsersController_update"];
  };
  "/api/users/{id}/addRole": {
    patch: operations["UsersController_addRole"];
  };
  "/api/users/{id}/removeRole": {
    patch: operations["UsersController_removeRole"];
  };
  "/api/periods/export": {
    /** Export periods document to json or csv */
    get: operations["PeriodsController_export"];
  };
  "/api/periods": {
    /** List all periods */
    get: operations["PeriodsController_findAllPaginated"];
    /** Create a new period */
    post: operations["PeriodsController_create"];
  };
  "/api/periods/{id}": {
    /** Find period by id */
    get: operations["PeriodsController_findOne"];
    /** Update a period */
    patch: operations["PeriodsController_update"];
  };
  "/api/periods/{id}/close": {
    /** Close a period */
    patch: operations["PeriodsController_close"];
  };
  "/api/periods/{id}/praise": {
    /** Fetch all Praise in a period */
    get: operations["PeriodsController_praise"];
  };
  "/api/periods/{periodId}/praise/receiver/{receiverId}": {
    /** Fetch all Praise in a period for a given receiver */
    get: operations["PeriodsController_praiseByReceiver"];
  };
  "/api/periods/{periodId}/praise/giver/{giverId}": {
    /** Fetch all Praise in a period for a given giver */
    get: operations["PeriodsController_praiseByGiver"];
  };
  "/api/periods/{periodId}/praise/quantifier/{quantifierId}": {
    /** Fetch all Praise in a period for a given quantifier */
    get: operations["PeriodsController_praiseByQuantifier"];
  };
  "/api/periods/{id}/verifyQuantifierPoolSize": {
    /** Verify quantifier pool size */
    get: operations["PeriodsController_verifyQuantifierPoolSize"];
  };
  "/api/periods/{id}/assignQuantifiers": {
    /** Assign quantifiers to period */
    patch: operations["PeriodsController_assignQuantifiers"];
  };
  "/api/periods/{id}/replaceQuantifier": {
    /** Replace quantifier in period */
    patch: operations["PeriodsController_replaceQuantifier"];
  };
  "/api/event-log": {
    /** List event logs, paginated results */
    get: operations["EventLogController_findAllPaginated"];
  };
  "/api/event-log/types": {
    /** List event log types */
    get: operations["EventLogController_types"];
  };
  "/api/settings": {
    /** List all settings. */
    get: operations["SettingsController_findAll"];
  };
  "/api/settings/{id}": {
    /** Get a setting. */
    get: operations["SettingsController_findOne"];
    /** Set a value for a setting. */
    patch: operations["SettingsController_set"];
  };
  "/api/settings/{id}/upload": {
    /** Upload a file for a setting */
    patch: operations["SettingsController_setWithUpload"];
  };
  "/api/settings/uploads/{file}": {
    /** Serve an uploaded settings file. */
    get: operations["SettingsController_serveUpload"];
  };
  "/api/periods/{periodId}/settings": {
    /** List all period settings. */
    get: operations["PeriodSettingsController_findAll"];
  };
  "/api/periods/{periodId}/settings/{settingId}": {
    /** Get a period setting. */
    get: operations["PeriodSettingsController_findOne"];
    /** Set value for a period setting. */
    patch: operations["PeriodSettingsController_set"];
  };
  "/api/praise": {
    /** List praise items, paginated results */
    get: operations["PraiseController_findAllPaginated"];
    /** Create praise item */
    post: operations["PraiseController_praise"];
  };
  "/api/praise/export": {
    /** Export Praises document to json or csv */
    get: operations["PraiseController_export"];
  };
  "/api/praise/{id}": {
    /** Find praise item by id */
    get: operations["PraiseController_findOne"];
  };
  "/api/praise/forward": {
    /** Forward praise item */
    post: operations["PraiseController_forward"];
  };
  "/api/useraccounts": {
    /** UserAccount list */
    get: operations["UserAccountsController_findAll"];
    /** Create a UserAccount */
    post: operations["UserAccountsController_create"];
  };
  "/api/useraccounts/export": {
    /** Exports UserAccounts document to json or csv. */
    get: operations["UserAccountsController_export"];
  };
  "/api/useraccounts/{id}": {
    /** Get a UserAccount. */
    get: operations["UserAccountsController_findOne"];
    /** Update UserAccount */
    patch: operations["UserAccountsController_update"];
  };
  "/api/api-key": {
    /** List all API keys */
    get: operations["ApiKeyController_findAll"];
    /** Create API key */
    post: operations["ApiKeyController_createApiKey"];
  };
  "/api/api-key/{id}": {
    /** Get API key by ID */
    get: operations["ApiKeyController_findOne"];
    /** Update API key description */
    put: operations["ApiKeyController_updateApiKeyDescription"];
    /** Revoke API key */
    delete: operations["ApiKeyController_revokeApiKey"];
  };
  "/api/auth/eth-signature/nonce": {
    /** Generates a nonce for the user and returns it */
    post: operations["EthSignatureController_nonce"];
  };
  "/api/auth/eth-signature/login": {
    /** Verifies a user's signature and returns a JWT token */
    post: operations["EthSignatureController_login"];
  };
  "/api/communities": {
    get: operations["CommunityController_findAll"];
    /** Create a new community */
    post: operations["CommunityController_create"];
  };
  "/api/communities/{id}": {
    get: operations["CommunityController_findOne"];
    /** Update community */
    patch: operations["CommunityController_update"];
  };
  "/api/communities/{id}/discord/link": {
    /** Link discord to community */
    patch: operations["CommunityController_linkDiscord"];
  };
  "/api/quantifications/export": {
    /** Exports quantifications document to json or csv. */
    get: operations["QuantificationsController_export"];
  };
  "/api/quantifications/multiple": {
    /** Quantify multiple praise items */
    patch: operations["QuantificationsController_quantifyMultiple"];
  };
  "/api/quantifications/{id}": {
    /** Quantify praise item by id */
    patch: operations["QuantificationsController_quantify"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ActivateInputDto: {
      /** @example 0xAAB27b150451726EC7738aa1d0A94505c8729bd1 */
      identityEthAddress: string;
      /** @example darth#3455 */
      accountId: string;
      /** @example 0xdb4bb91357b23083ec2a36dc1fe23e59b71434fc020542da7e983df206ed06611e275eb30e239508f9758c0608dca6cef5619c41b50a48f22bdb36a8dabc2d201c */
      signature: string;
    };
    UserNoUserAccountsDto: {
      /** @example 5f9f1b9b9b9b9b9b9b9b9b9b */
      _id: string;
      /** @example 0xAAB27b150451726EC7738aa1d0A94505c8729bd1 */
      identityEthAddress: string;
      /** @example 0xAAB27b150451726EC7738aa1d0A94505c8729bd1 */
      rewardsEthAddress: string;
      /** @example darth */
      username: string;
      roles: readonly ("USER" | "QUANTIFIER" | "FORWARDER" | "ADMIN" | "ROOT" | "API_KEY_READWRITE" | "API_KEY_READ" | "API_KEY_DISCORD_BOT" | "API_KEY_SETUP_WEB")[];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    UserAccount: {
      /** @example 63b428f7d9ca4f6ff5370d05 */
      _id: string;
      user?: components["schemas"]["UserNoUserAccountsDto"];
      /** @example 098098098098098 */
      accountId: string;
      /** @example darth#6755 */
      name: string;
      /** @example 098098098087097 */
      avatarId: string;
      /** @example DISCORD */
      platform: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    User: {
      /** @example 5f9f1b9b9b9b9b9b9b9b9b9b */
      _id: string;
      /** @example 0xAAB27b150451726EC7738aa1d0A94505c8729bd1 */
      identityEthAddress: string;
      /** @example 0xAAB27b150451726EC7738aa1d0A94505c8729bd1 */
      rewardsEthAddress: string;
      /** @example darth */
      username: string;
      roles: readonly ("USER" | "QUANTIFIER" | "FORWARDER" | "ADMIN" | "ROOT" | "API_KEY_READWRITE" | "API_KEY_READ" | "API_KEY_DISCORD_BOT" | "API_KEY_SETUP_WEB")[];
      accounts: readonly (components["schemas"]["UserAccount"])[];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    UserWithStatsDto: {
      /** @example 5f9f1b9b9b9b9b9b9b9b9b9b */
      _id: string;
      /** @example 0xAAB27b150451726EC7738aa1d0A94505c8729bd1 */
      identityEthAddress: string;
      /** @example 0xAAB27b150451726EC7738aa1d0A94505c8729bd1 */
      rewardsEthAddress: string;
      /** @example darth */
      username: string;
      roles: readonly ("USER" | "QUANTIFIER" | "FORWARDER" | "ADMIN" | "ROOT" | "API_KEY_READWRITE" | "API_KEY_READ" | "API_KEY_DISCORD_BOT" | "API_KEY_SETUP_WEB")[];
      accounts: readonly (components["schemas"]["UserAccount"])[];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      receivedTotalScore?: number;
      receivedTotalCount?: number;
      givenTotalScore?: number;
      givenTotalCount?: number;
    };
    UpdateUserRequestDto: {
      /** @example 0xAAB27b150451726EC7738aa1d0A94505c8729bd1 */
      rewardsEthAddress: string;
      /** @example darth */
      username: string;
    };
    UpdateUserRoleInputDto: {
      /** @enum {string} */
      role: "USER" | "QUANTIFIER" | "FORWARDER" | "ADMIN" | "ROOT" | "API_KEY_READWRITE" | "API_KEY_READ" | "API_KEY_DISCORD_BOT" | "API_KEY_SETUP_WEB";
    };
    Period: {
      /** @example 621f802b813dbdba9eeaf7d7 */
      _id: string;
      /** @example June 2021 */
      name: string;
      /** @enum {string} */
      status: "OPEN" | "QUANTIFY" | "CLOSED";
      /** Format: date-time */
      endDate: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    PeriodPaginatedResponseDto: {
      /** @example 1200 */
      totalDocs: number;
      /** @example 10 */
      limit: number;
      /** @example 12 */
      totalPages: number;
      /** @example 2 */
      page?: number;
      /** @example 1 */
      pagingCounter: number;
      /** @example false */
      hasPrevPage: Record<string, never>;
      /** @example true */
      hasNextPage: Record<string, never>;
      /** @example 1 */
      prevPage?: Record<string, never>;
      /** @example 3 */
      nextPage?: Record<string, never>;
      docs: readonly (components["schemas"]["Period"])[];
      meta?: Record<string, never>;
    };
    Quantification: {
      /** @example 639b178f19296ee0f2d0585d */
      _id: string;
      /** @example 144 */
      score: number;
      /** @example 144 */
      scoreRealized: number;
      /** @example true */
      dismissed: boolean;
      /** @example 639b178f19296ee0f2d0585d */
      duplicatePraise: string;
      /** @example 639b178f19296ee0f2d0585d */
      quantifier: string;
      /** @example 639b178f19296ee0f2d0585d */
      praise: string;
      /**
       * Format: date-time 
       * @example 2021-06-01T00:00:00.000Z
       */
      createdAt: string;
      /**
       * Format: date-time 
       * @example 2021-06-01T00:00:00.000Z
       */
      updatedAt: string;
    };
    PeriodDetailsQuantifierDto: {
      /** @example 5f9f1b9b9b9b9b9b9b9b9b9b */
      _id: string;
      /** @example 0xAAB27b150451726EC7738aa1d0A94505c8729bd1 */
      identityEthAddress: string;
      /** @example darth */
      username: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @example 1 */
      finishedCount: number;
      /** @example 1 */
      praiseCount: number;
      quantifications: (components["schemas"]["Quantification"])[];
    };
    PeriodDetailsGiverReceiverDto: {
      /** @example 63b428f7d9ca4f6ff5370d05 */
      _id: string;
      /** @example 098098098098098 */
      accountId: string;
      /** @example darth#6755 */
      name: string;
      /** @example 098098098087097 */
      avatarId: string;
      /** @example DISCORD */
      platform: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @example 621f802b813dbdba9eeaf7d7 */
      user: string;
      /** @example 5 */
      praiseCount: number;
      /** @example 144 */
      score: number;
    };
    PeriodDetailsDto: {
      /** @example 621f802b813dbdba9eeaf7d7 */
      _id: string;
      /** @example June 2021 */
      name: string;
      /** @enum {string} */
      status: "OPEN" | "QUANTIFY" | "CLOSED";
      /** Format: date-time */
      endDate: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      quantifiers?: readonly (components["schemas"]["PeriodDetailsQuantifierDto"])[];
      givers?: readonly (components["schemas"]["PeriodDetailsGiverReceiverDto"])[];
      receivers?: readonly (components["schemas"]["PeriodDetailsGiverReceiverDto"])[];
      /** @example 543 */
      numberOfPraise: number;
    };
    CreatePeriodInputDto: {
      /** @example June 2021 */
      name: string;
      endDate: string;
    };
    UpdatePeriodInputDto: {
      /** @example June 2021 */
      name?: string;
      endDate?: string;
    };
    UserAccountWithUserRefDto: {
      /** @example 63b428f7d9ca4f6ff5370d05 */
      _id: string;
      /** @example 621f802b813dbdba9eeaf7d7 */
      user?: string;
      /** @example 098098098098098 */
      accountId: string;
      /** @example darth#6755 */
      name: string;
      /** @example 098098098087097 */
      avatarId: string;
      /** @example DISCORD */
      platform: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    PraiseWithUserAccountsWithUserRefDto: {
      /** @example 639b178f19296ee0f2d0585d */
      _id: string;
      /** @example for making edits in the welcome text */
      reasonRaw: string;
      /** @example for making edits in the welcome text */
      reason: string;
      /** @example DISCORD:810180621930070088:810180622336262195 */
      sourceId: string;
      /** @example DISCORD:Token%20Engineering%20Commons:%F0%9F%99%8F%EF%BD%9Cpraise */
      sourceName: string;
      /** @example 144 */
      score: number;
      receiver: components["schemas"]["UserAccountWithUserRefDto"];
      giver: components["schemas"]["UserAccountWithUserRefDto"];
      forwarder: components["schemas"]["UserAccountWithUserRefDto"];
      quantifications: readonly (components["schemas"]["Quantification"])[];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    VerifyQuantifierPoolSizeDto: {
      /**
       * @description The number of quantifiers in the pool 
       * @example 10
       */
      quantifierPoolSize: number;
      /**
       * @description The number of quantifiers needed in the pool 
       * @example 10
       */
      quantifierPoolSizeNeeded: number;
      /** @example 0 */
      quantifierPoolDeficitSize: number;
    };
    ReplaceQuantifierInputDto: {
      /** @example 639b178f19296ee0f2d0585d */
      currentQuantifierId: string;
      /** @example 639b178f19296ee0f2d05666 */
      newQuantifierId: string;
    };
    Praise: {
      /** @example 639b178f19296ee0f2d0585d */
      _id: string;
      /** @example for making edits in the welcome text */
      reasonRaw: string;
      /** @example for making edits in the welcome text */
      reason: string;
      /** @example DISCORD:810180621930070088:810180622336262195 */
      sourceId: string;
      /** @example DISCORD:Token%20Engineering%20Commons:%F0%9F%99%8F%EF%BD%9Cpraise */
      sourceName: string;
      /** @example 144 */
      score: number;
      receiver: components["schemas"]["UserAccount"];
      giver: components["schemas"]["UserAccount"];
      forwarder: components["schemas"]["UserAccount"];
      quantifications: readonly (components["schemas"]["Quantification"])[];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    ReplaceQuantifierResponseDto: {
      praises: readonly (components["schemas"]["Praise"])[];
      period: components["schemas"]["PeriodDetailsDto"];
    };
    UserAccountNoUserId: {
      /** @example 63b428f7d9ca4f6ff5370d05 */
      _id: string;
      /** @example 098098098098098 */
      accountId: string;
      /** @example darth#6755 */
      name: string;
      /** @example 098098098087097 */
      avatarId: string;
      /** @example DISCORD */
      platform: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    EventLogType: {
      /** @enum {string} */
      key: "PERMISSION" | "AUTHENTICATION" | "PERIOD" | "PRAISE" | "QUANTIFICATION" | "SETTING" | "USER_ACCOUNT";
      /** @example An action that changes user permissions */
      label: string;
      /** @example A user's permissions were changed */
      description: string;
    };
    EventLog: {
      /** @example 621f802b813dbdba9eeaf7d7 */
      _id: string;
      user?: components["schemas"]["User"];
      useraccount?: components["schemas"]["UserAccountNoUserId"];
      /** @example 621f802b813dbdba9eeaf7d7 */
      apiKey?: string;
      /** @example 621f802b813dbdba9eeaf7d7 */
      period?: string;
      type: components["schemas"]["EventLogType"];
      /** @example A description of the event */
      description: string;
      /**
       * Format: date-time 
       * @example 2023-03-01T22:51:20.012Z
       */
      createdAt: string;
      /**
       * Format: date-time 
       * @example 2023-03-01T22:51:20.012Z
       */
      updatedAt: string;
    };
    EventLogPaginatedResponseDto: {
      /** @example 1200 */
      totalDocs: number;
      /** @example 10 */
      limit: number;
      /** @example 12 */
      totalPages: number;
      /** @example 2 */
      page?: number;
      /** @example 1 */
      pagingCounter: number;
      /** @example false */
      hasPrevPage: Record<string, never>;
      /** @example true */
      hasNextPage: Record<string, never>;
      /** @example 1 */
      prevPage?: Record<string, never>;
      /** @example 3 */
      nextPage?: Record<string, never>;
      docs: readonly (components["schemas"]["EventLog"])[];
      meta?: Record<string, never>;
    };
    Setting: {
      /** @example 621f802b813dbdbaddeaf799 */
      _id: string;
      /** @example SETTING_KEY */
      key: string;
      /** @example 666 */
      value: string;
      /** @example 666 */
      valueRealized: string | (string)[] | boolean | number | (number)[];
      /** @example 555 */
      defaultValue: string;
      /** @enum {string} */
      type: "Integer" | "Float" | "String" | "Textarea" | "Boolean" | "IntegerList" | "StringList" | "Image" | "Radio" | "JSON";
      /** @example Quantifiers Per Praise */
      label: string;
      /** @example How many redundant quantifications are assigned to each praise? */
      description: string;
      /** @example 0 */
      group: number;
      options: string;
      /** @example 0 */
      subgroup: number;
      /** @example true */
      periodOverridable: boolean;
    };
    SetSettingDto: {
      /** @example 666 */
      value: string;
    };
    PeriodSetting: {
      /** @example 62291b7ea8b1619f78818524 */
      _id: string;
      period: components["schemas"]["Period"];
      setting: components["schemas"]["Setting"];
      value: string;
      /** @example 666 */
      valueRealized: string | (string)[] | boolean | number | (number)[];
    };
    SetPeriodSettingDto: {
      value: string;
    };
    PraisePaginatedResponseDto: {
      /** @example 1200 */
      totalDocs: number;
      /** @example 10 */
      limit: number;
      /** @example 12 */
      totalPages: number;
      /** @example 2 */
      page?: number;
      /** @example 1 */
      pagingCounter: number;
      /** @example false */
      hasPrevPage: Record<string, never>;
      /** @example true */
      hasNextPage: Record<string, never>;
      /** @example 1 */
      prevPage?: Record<string, never>;
      /** @example 3 */
      nextPage?: Record<string, never>;
      docs: readonly (components["schemas"]["Praise"])[];
      meta?: Record<string, never>;
    };
    PraiseCreateInputDto: {
      /** @example for making edits in the welcome text */
      reasonRaw: string;
      /** @example for making edits in the welcome text */
      reason: string;
      /** @example DISCORD:810180621930070088:810180622336262195 */
      sourceId: string;
      /** @example DISCORD:Token%20Engineering%20Commons:%F0%9F%99%8F%EF%BD%9Cpraise */
      sourceName: string;
      receiverIds: (string)[];
      giver: components["schemas"]["UserAccount"];
    };
    PraiseForwardInputDto: {
      /** @example for making edits in the welcome text */
      reasonRaw: string;
      /** @example for making edits in the welcome text */
      reason: string;
      /** @example DISCORD:810180621930070088:810180622336262195 */
      sourceId: string;
      /** @example DISCORD:Token%20Engineering%20Commons:%F0%9F%99%8F%EF%BD%9Cpraise */
      sourceName: string;
      receiverIds: (string)[];
      giver: components["schemas"]["UserAccount"];
      forwarder: components["schemas"]["UserAccount"];
    };
    CreateUserAccountInputDto: {
      /** @example 098098098098098 */
      accountId: string;
      /** @example darth#6755 */
      name: string;
      /** @example 098098098087097 */
      avatarId: string;
      /** @example DISCORD */
      platform: string;
      /** @example jkhvuygi643jh35g53 */
      activateToken?: string;
      /** @example 63b428f7d9ca4f6ff5370d05 */
      user?: string;
    };
    CreateUserAccountResponseDto: {
      /** @example 63b428f7d9ca4f6ff5370d05 */
      _id: string;
      user?: components["schemas"]["UserNoUserAccountsDto"];
      /** @example 098098098098098 */
      accountId: string;
      /** @example darth#6755 */
      name: string;
      /** @example 098098098087097 */
      avatarId: string;
      /** @example DISCORD */
      platform: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @example jkhvuygi643jh35g53 */
      activateToken?: string;
    };
    UpdateUserAccountInputDto: {
      /** @example 098098098098098 */
      accountId?: string;
      /** @example darth#6755 */
      name?: string;
      /** @example 098098098087097 */
      avatarId?: string;
      /** @example DISCORD */
      platform?: string;
      /** @example jkhvuygi643jh35g53 */
      activateToken?: string;
      /** @example 63b428f7d9ca4f6ff5370d05 */
      user?: string;
    };
    UpdateUserAccountResponseDto: {
      /** @example 63b428f7d9ca4f6ff5370d05 */
      _id: string;
      user?: components["schemas"]["UserNoUserAccountsDto"];
      /** @example 098098098098098 */
      accountId: string;
      /** @example darth#6755 */
      name: string;
      /** @example 098098098087097 */
      avatarId: string;
      /** @example DISCORD */
      platform: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @example jkhvuygi643jh35g53 */
      activateToken?: string;
    };
    CreateApiKeyInputDto: {
      /** @example My API Key */
      description: string;
      /** @enum {string} */
      role: "USER" | "QUANTIFIER" | "FORWARDER" | "ADMIN" | "ROOT" | "API_KEY_READWRITE" | "API_KEY_READ" | "API_KEY_DISCORD_BOT" | "API_KEY_SETUP_WEB";
    };
    CreateApiKeyResponseDto: {
      /** @example 639b178f19296ee0f2d0585d */
      _id: string;
      /** @example 89f7edbd */
      name: string;
      /** @example My API Key */
      description: string;
      /** @example $2b$10$hfRNI.V7ewuN/K.5eSt6oelaQ.FDj6irfUNR9wkKnL/qsNT23aE4i */
      hash: string;
      /** @enum {string} */
      role: "USER" | "QUANTIFIER" | "FORWARDER" | "ADMIN" | "ROOT" | "API_KEY_READWRITE" | "API_KEY_READ" | "API_KEY_DISCORD_BOT" | "API_KEY_SETUP_WEB";
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @example 1834a97caed67b244dd11fa5ef53aa74f13781ad0aea8148b8607d861d9f7535 */
      key: string;
    };
    ApiKey: {
      /** @example 639b178f19296ee0f2d0585d */
      _id: string;
      /** @example 89f7edbd */
      name: string;
      /** @example My API Key */
      description: string;
      /** @example $2b$10$hfRNI.V7ewuN/K.5eSt6oelaQ.FDj6irfUNR9wkKnL/qsNT23aE4i */
      hash: string;
      /** @enum {string} */
      role: "USER" | "QUANTIFIER" | "FORWARDER" | "ADMIN" | "ROOT" | "API_KEY_READWRITE" | "API_KEY_READ" | "API_KEY_DISCORD_BOT" | "API_KEY_SETUP_WEB";
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    UpdateDescriptionInputDto: {
      /** @example My API Key */
      description: string;
    };
    NonceInputDto: {
      /** @example 0xAAB27b150451726EC7738aa1d0A94505c8729bd1 */
      identityEthAddress: string;
    };
    NonceResponseDto: {
      /** @example 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045 */
      identityEthAddress: string;
      /** @example uh9h998u98uj09noj */
      nonce: string;
    };
    LoginInputDto: {
      /** @example 0xAAB27b150451726EC7738aa1d0A94505c8729bd1 */
      identityEthAddress: string;
      signature: string;
    };
    LoginResponseDto: {
      /** @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2MmIwNmY3NjU1ODA0YjE2MjllODQxNTkiLCJpZGVudGl0eUV0aEFkZHJlc3MiOiIweGEzMmFFQ2RhNzUyY0Y0RUY4OTk1NmU4M2Q2MEMwNDgzNWQ0RkE4NjciLCJyb2xlcyI6WyJVU0VSIiwiQURNSU4iXSwiaXNSZWZyZXNoIjpmYWxzZSwiaWF0IjoxNjcwMzE1OTk4LCJleHAiOjE2NzAzMTk1OTh9.qKvucMZLVbz_1TnsxaSqYX1i5CSpver6fFJTf3pABVA */
      accessToken: string;
      /** @example 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045 */
      identityEthAddress: string;
      /** @example bearer */
      tokenType: string;
    };
    CreateCommunityInputDto: {
      /** @example banklessdao.givepraise.xyz */
      hostname: string;
      /** @example BanklessDAO */
      name: string;
      /** @example john.smith@banklessDao.com */
      email: string;
      /** @example 0x123.. */
      creator: string;
      /**
       * @example [
       *   "0x123..",
       *   "0x345.."
       * ]
       */
      owners: (string)[];
      /** @example 0980987846534 */
      discordGuildId?: string;
    };
    ObjectId: Record<string, never>;
    Community: {
      /** @example 621f802b813dbdba9eeaf7b4 */
      _id: components["schemas"]["ObjectId"];
      /** @example banklessdao.givepraise.xyz */
      hostname: string;
      /** @example BanklessDAO */
      name: string;
      /** @example john.smith@banklessDao.com */
      email: string;
      /** @example 0x123.. */
      creator: string;
      /**
       * @example [
       *   "0x123..",
       *   "0x345.."
       * ]
       */
      owners: (string)[];
      /** @example 0980987846534 */
      discordGuildId?: string;
      /** @example oiujoiuoo8u */
      discordLinkNonce: string;
      /** @example true */
      isPublic: boolean;
      /** @enum {string} */
      discordLinkState: "NOT_SET" | "PENDING" | "ACTIVE" | "DEACTIVE";
    };
    UpdateCommunityInputDto: {
      /** @example banklessdao.givepraise.xyz */
      hostname?: string;
      /** @example BanklessDAO */
      name?: string;
      /** @example john.smith@banklessDao.com */
      email?: string;
      /**
       * @example [
       *   "0x123..",
       *   "0x345.."
       * ]
       */
      owners?: (string)[];
    };
    CommunityPaginatedResponseDto: {
      /** @example 1200 */
      totalDocs: number;
      /** @example 10 */
      limit: number;
      /** @example 12 */
      totalPages: number;
      /** @example 2 */
      page?: number;
      /** @example 1 */
      pagingCounter: number;
      /** @example false */
      hasPrevPage: Record<string, never>;
      /** @example true */
      hasNextPage: Record<string, never>;
      /** @example 1 */
      prevPage?: Record<string, never>;
      /** @example 3 */
      nextPage?: Record<string, never>;
      docs: readonly (components["schemas"]["Community"])[];
      meta?: Record<string, never>;
    };
    LinkDiscordBotDto: {
      /** @example 0xdb4bb91357b23083ec2a36dc1fe23e59b71434fc020542da7e983df206ed06611e275eb30e239508f9758c0608dca6cef5619c41b50a48f22bdb36a8dabc2d201c */
      signedMessage: string;
    };
    QuantifyInputDto: {
      score?: number;
      dismissed?: boolean;
      /** @example 639b178f19296ee0f2d0585d */
      duplicatePraise?: string;
    };
    QuantifyMultipleInputDto: {
      params: components["schemas"]["QuantifyInputDto"];
      /**
       * @example [
       *   "639b178f19296ee0f2d0585d",
       *   "639b178f19296ee0f2d0585e",
       *   "639b178f19296ee0f2d0585f"
       * ]
       */
      praiseIds: (string)[];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /** Activate a user account in order to be able to give praise and receive rewards. Activation a user account creates a new User object or adds user account to User if it already exists. */
  ActivateController_activate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ActivateInputDto"];
      };
    };
    responses: {
      /** @description The created (or updated) user. */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      201: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  /** Export users document to json or csv */
  UsersController_export: {
    parameters: {
      query: {
        format?: "csv" | "json" | "parquet";
      };
    };
    responses: {
      200: {
        content: {
          "application/json": string;
          "application/octet-stream": string;
        };
      };
    };
  };
  UsersController_findAll: {
    responses: {
      /** @description All users */
      200: {
        content: {
          "application/json": (components["schemas"]["User"])[];
        };
      };
    };
  };
  UsersController_findOne: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description A single user */
      200: {
        content: {
          "application/json": components["schemas"]["UserWithStatsDto"];
        };
      };
    };
  };
  /** Updates a user */
  UsersController_update: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateUserRequestDto"];
      };
    };
    responses: {
      /** @description Updated user */
      200: {
        content: {
          "application/json": components["schemas"]["UserWithStatsDto"];
        };
      };
    };
  };
  UsersController_addRole: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateUserRoleInputDto"];
      };
    };
    responses: {
      /** @description The updated user */
      200: {
        content: {
          "application/json": components["schemas"]["UserWithStatsDto"];
        };
      };
    };
  };
  UsersController_removeRole: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateUserRoleInputDto"];
      };
    };
    responses: {
      /** @description The updated user */
      200: {
        content: {
          "application/json": components["schemas"]["UserWithStatsDto"];
        };
      };
    };
  };
  /** Export periods document to json or csv */
  PeriodsController_export: {
    parameters: {
      query: {
        format?: "csv" | "json" | "parquet";
      };
    };
    responses: {
      200: {
        content: {
          "application/json": string;
          "application/octet-stream": string;
        };
      };
    };
  };
  /** List all periods */
  PeriodsController_findAllPaginated: {
    parameters: {
      query: {
        /** @example 10 */
        limit: number;
        /** @example 1 */
        page: number;
        sortColumn?: string;
        sortType?: "asc" | "desc";
      };
    };
    responses: {
      /** @description Periods */
      200: {
        content: {
          "application/json": components["schemas"]["PeriodPaginatedResponseDto"];
        };
      };
    };
  };
  /** Create a new period */
  PeriodsController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreatePeriodInputDto"];
      };
    };
    responses: {
      /** @description Period */
      200: {
        content: {
          "application/json": components["schemas"]["PeriodDetailsDto"];
        };
      };
      201: {
        content: {
          "application/json": components["schemas"]["PeriodDetailsDto"];
        };
      };
    };
  };
  /** Find period by id */
  PeriodsController_findOne: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Period */
      200: {
        content: {
          "application/json": components["schemas"]["PeriodDetailsDto"];
        };
      };
    };
  };
  /** Update a period */
  PeriodsController_update: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatePeriodInputDto"];
      };
    };
    responses: {
      /** @description Period */
      200: {
        content: {
          "application/json": components["schemas"]["PeriodDetailsDto"];
        };
      };
    };
  };
  /** Close a period */
  PeriodsController_close: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Period */
      200: {
        content: {
          "application/json": components["schemas"]["PeriodDetailsDto"];
        };
      };
    };
  };
  /** Fetch all Praise in a period */
  PeriodsController_praise: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Period Praise items */
      200: {
        content: {
          "application/json": (components["schemas"]["PraiseWithUserAccountsWithUserRefDto"])[];
        };
      };
    };
  };
  /** Fetch all Praise in a period for a given receiver */
  PeriodsController_praiseByReceiver: {
    parameters: {
      path: {
        periodId: string;
        receiverId: string;
      };
    };
    responses: {
      /** @description Period Praise items */
      200: {
        content: {
          "application/json": (components["schemas"]["PraiseWithUserAccountsWithUserRefDto"])[];
        };
      };
    };
  };
  /** Fetch all Praise in a period for a given giver */
  PeriodsController_praiseByGiver: {
    parameters: {
      path: {
        periodId: string;
        giverId: string;
      };
    };
    responses: {
      /** @description Period Praise items */
      200: {
        content: {
          "application/json": (components["schemas"]["PraiseWithUserAccountsWithUserRefDto"])[];
        };
      };
    };
  };
  /** Fetch all Praise in a period for a given quantifier */
  PeriodsController_praiseByQuantifier: {
    parameters: {
      path: {
        periodId: string;
        quantifierId: string;
      };
    };
    responses: {
      /** @description Period Praise items */
      200: {
        content: {
          "application/json": (components["schemas"]["PraiseWithUserAccountsWithUserRefDto"])[];
        };
      };
    };
  };
  /** Verify quantifier pool size */
  PeriodsController_verifyQuantifierPoolSize: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Period */
      200: {
        content: {
          "application/json": components["schemas"]["VerifyQuantifierPoolSizeDto"];
        };
      };
    };
  };
  /** Assign quantifiers to period */
  PeriodsController_assignQuantifiers: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Period */
      200: {
        content: {
          "application/json": components["schemas"]["PeriodDetailsDto"];
        };
      };
    };
  };
  /** Replace quantifier in period */
  PeriodsController_replaceQuantifier: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReplaceQuantifierInputDto"];
      };
    };
    responses: {
      /** @description Period */
      200: {
        content: {
          "application/json": components["schemas"]["ReplaceQuantifierResponseDto"];
        };
      };
    };
  };
  /** List event logs, paginated results */
  EventLogController_findAllPaginated: {
    parameters: {
      query: {
        /** @example 10 */
        limit: number;
        /** @example 1 */
        page: number;
        sortColumn?: string;
        sortType?: "asc" | "desc";
        search?: string;
        types?: (string)[];
      };
    };
    responses: {
      /** @description Paginated event logs */
      200: {
        content: {
          "application/json": components["schemas"]["EventLogPaginatedResponseDto"];
        };
      };
    };
  };
  /** List event log types */
  EventLogController_types: {
    responses: {
      /** @description Event log types */
      200: {
        content: {
          "application/json": (components["schemas"]["EventLogType"])[];
        };
      };
    };
  };
  /** List all settings. */
  SettingsController_findAll: {
    parameters: {
      query: {
        /** @example SETTING_KEY */
        key?: string;
        type?: "Integer" | "Float" | "String" | "Textarea" | "Boolean" | "IntegerList" | "StringList" | "Image" | "Radio" | "JSON";
        /** @example 0 */
        group?: number;
        /** @example 0 */
        subgroup?: number;
      };
    };
    responses: {
      /** @description All settings. */
      200: {
        content: {
          "application/json": (components["schemas"]["Setting"])[];
        };
      };
    };
  };
  /** Get a setting. */
  SettingsController_findOne: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Setting. */
      200: {
        content: {
          "application/json": components["schemas"]["Setting"];
        };
      };
    };
  };
  /** Set a value for a setting. */
  SettingsController_set: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetSettingDto"];
      };
    };
    responses: {
      /** @description Updated setting. */
      200: {
        content: {
          "application/json": components["schemas"]["Setting"];
        };
      };
    };
  };
  /** Upload a file for a setting */
  SettingsController_setWithUpload: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Updated setting. */
      200: {
        content: {
          "application/json": components["schemas"]["Setting"];
        };
      };
    };
  };
  /** Serve an uploaded settings file. */
  SettingsController_serveUpload: {
    parameters: {
      path: {
        file: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** List all period settings. */
  PeriodSettingsController_findAll: {
    parameters: {
      path: {
        periodId: string;
      };
    };
    responses: {
      /** @description All period settings */
      200: {
        content: {
          "application/json": (components["schemas"]["PeriodSetting"])[];
        };
      };
    };
  };
  /** Get a period setting. */
  PeriodSettingsController_findOne: {
    parameters: {
      path: {
        periodId: string;
        settingId: string;
      };
    };
    responses: {
      /** @description Period setting */
      200: {
        content: {
          "application/json": components["schemas"]["PeriodSetting"];
        };
      };
    };
  };
  /** Set value for a period setting. */
  PeriodSettingsController_set: {
    parameters: {
      path: {
        periodId: string;
        settingId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetPeriodSettingDto"];
      };
    };
    responses: {
      /** @description Updated period setting */
      200: {
        content: {
          "application/json": components["schemas"]["PeriodSetting"];
        };
      };
    };
  };
  /** List praise items, paginated results */
  PraiseController_findAllPaginated: {
    parameters: {
      query: {
        /** @example 10 */
        limit: number;
        /** @example 1 */
        page: number;
        sortColumn?: string;
        sortType?: "asc" | "desc";
        giver?: string;
        receiver?: string;
      };
    };
    responses: {
      /** @description Paginated praise items */
      200: {
        content: {
          "application/json": components["schemas"]["PraisePaginatedResponseDto"];
        };
      };
    };
  };
  /** Create praise item */
  PraiseController_praise: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PraiseCreateInputDto"];
      };
    };
    responses: {
      /** @description Praise item */
      200: {
        content: {
          "application/json": components["schemas"]["Praise"];
        };
      };
      201: {
        content: {
          "application/json": (components["schemas"]["Praise"])[];
        };
      };
    };
  };
  /** Export Praises document to json or csv */
  PraiseController_export: {
    parameters: {
      query: {
        format?: "csv" | "json" | "parquet";
        startDate?: string;
        endDate?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": string;
          "application/octet-stream": string;
        };
      };
    };
  };
  /** Find praise item by id */
  PraiseController_findOne: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Praise item */
      200: {
        content: {
          "application/json": components["schemas"]["Praise"];
        };
      };
    };
  };
  /** Forward praise item */
  PraiseController_forward: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PraiseForwardInputDto"];
      };
    };
    responses: {
      /** @description Praise item */
      200: {
        content: {
          "application/json": components["schemas"]["Praise"];
        };
      };
      201: {
        content: {
          "application/json": (components["schemas"]["Praise"])[];
        };
      };
    };
  };
  /** UserAccount list */
  UserAccountsController_findAll: {
    parameters: {
      query: {
        /** @example 098098098098098 */
        accountId?: string;
        /** @example darth#6755 */
        name?: string;
        /** @example 63b428f7d9ca4f6ff5370d05 */
        user?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserAccount"];
        };
      };
    };
  };
  /** Create a UserAccount */
  UserAccountsController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateUserAccountInputDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["CreateUserAccountResponseDto"];
        };
      };
    };
  };
  /** Exports UserAccounts document to json or csv. */
  UserAccountsController_export: {
    parameters: {
      query: {
        format?: "csv" | "json" | "parquet";
      };
    };
    responses: {
      200: {
        content: {
          "application/json": string;
          "application/octet-stream": string;
        };
      };
    };
  };
  /** Get a UserAccount. */
  UserAccountsController_findOne: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description UserAccount */
      200: {
        content: {
          "application/json": components["schemas"]["UserAccount"];
        };
      };
    };
  };
  /** Update UserAccount */
  UserAccountsController_update: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateUserAccountInputDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UpdateUserAccountResponseDto"];
        };
      };
    };
  };
  /** List all API keys */
  ApiKeyController_findAll: {
    responses: {
      /** @description Array of API keys */
      200: {
        content: {
          "application/json": (components["schemas"]["ApiKey"])[];
        };
      };
    };
  };
  /** Create API key */
  ApiKeyController_createApiKey: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateApiKeyInputDto"];
      };
    };
    responses: {
      /** @description API key created */
      201: {
        content: {
          "application/json": components["schemas"]["CreateApiKeyResponseDto"];
        };
      };
    };
  };
  /** Get API key by ID */
  ApiKeyController_findOne: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description An API key */
      200: {
        content: {
          "application/json": components["schemas"]["ApiKey"];
        };
      };
    };
  };
  /** Update API key description */
  ApiKeyController_updateApiKeyDescription: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateDescriptionInputDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ApiKey"];
        };
      };
      /** @description API key with updated description */
      201: {
        content: {
          "application/json": components["schemas"]["ApiKey"];
        };
      };
    };
  };
  /** Revoke API key */
  ApiKeyController_revokeApiKey: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ApiKey"];
        };
      };
      /** @description Revoked API key */
      201: {
        content: {
          "application/json": components["schemas"]["ApiKey"];
        };
      };
    };
  };
  /** Generates a nonce for the user and returns it */
  EthSignatureController_nonce: {
    /** @description A request containing the user identityEthAddress */
    requestBody: {
      content: {
        "application/json": components["schemas"]["NonceInputDto"];
      };
    };
    responses: {
      /** @description Nonce generated successfully */
      201: {
        content: {
          "application/json": components["schemas"]["NonceResponseDto"];
        };
      };
    };
  };
  /** Verifies a user's signature and returns a JWT token */
  EthSignatureController_login: {
    parameters: {
      header: {
        host: string;
      };
    };
    /**
     * @description A request containing the user identityEthAddress and signedlogin message. The signed message should be structured as follows: 
     * 
     * ```SIGN THIS MESSAGE TO LOGIN TO PRAISE.\n\nADDRESS:\n[identityEthAddress]\n\nNONCE:\n[nonce]```
     */
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginInputDto"];
      };
    };
    responses: {
      /** @description User authenticated successfully */
      201: {
        content: {
          "application/json": components["schemas"]["LoginResponseDto"];
        };
      };
    };
  };
  CommunityController_findAll: {
    parameters: {
      query: {
        /** @example 10 */
        limit: number;
        /** @example 1 */
        page: number;
        sortColumn?: string;
        sortType?: "asc" | "desc";
      };
    };
    responses: {
      /** @description All communities */
      200: {
        content: {
          "application/json": components["schemas"]["CommunityPaginatedResponseDto"];
        };
      };
    };
  };
  /** Create a new community */
  CommunityController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateCommunityInputDto"];
      };
    };
    responses: {
      /** @description Community */
      200: {
        content: {
          "application/json": components["schemas"]["Community"];
        };
      };
      201: {
        content: {
          "application/json": components["schemas"]["Community"];
        };
      };
    };
  };
  CommunityController_findOne: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description A single Community */
      200: {
        content: {
          "application/json": components["schemas"]["Community"];
        };
      };
    };
  };
  /** Update community */
  CommunityController_update: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateCommunityInputDto"];
      };
    };
    responses: {
      /** @description Community */
      200: {
        content: {
          "application/json": components["schemas"]["Community"];
        };
      };
    };
  };
  /** Link discord to community */
  CommunityController_linkDiscord: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LinkDiscordBotDto"];
      };
    };
    responses: {
      /** @description Community */
      200: {
        content: {
          "application/json": components["schemas"]["Community"];
        };
      };
    };
  };
  /** Exports quantifications document to json or csv. */
  QuantificationsController_export: {
    parameters: {
      query: {
        format?: "csv" | "json" | "parquet";
        startDate?: string;
        endDate?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": string;
          "application/octet-stream": string;
        };
      };
    };
  };
  /** Quantify multiple praise items */
  QuantificationsController_quantifyMultiple: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["QuantifyMultipleInputDto"];
      };
    };
    responses: {
      /** @description Praise items */
      200: {
        content: {
          "application/json": (components["schemas"]["Praise"])[];
        };
      };
    };
  };
  /** Quantify praise item by id */
  QuantificationsController_quantify: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["QuantifyInputDto"];
      };
    };
    responses: {
      /** @description Praise /Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/code/electron-sandbox/workbench/workbench.htmlitems */
      200: {
        content: {
          "application/json": (components["schemas"]["Praise"])[];
        };
      };
    };
  };
}
